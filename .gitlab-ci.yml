image: gradle:latest

variables:
  GIT_STRATEGY: clone
  GIT_FETCH_EXTRA_FLAGS: --tags 
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  FF_USE_FASTZIP: "true"
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

stages:
  - build
  - staging
  - production

build:
  stage: build
  cache:
    key:
      files:
        - build.gradle
    paths:
      - build/
      - cache/
      - .gradle/
    policy: pull-push
  script:
    - apt-get -y update
    - wget --no-verbose -O /tmp/chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_100.0.4896.60-1_amd64.deb 
    - apt install -y /tmp/chrome.deb -y
    - rm /tmp/chrome.deb
    - google-chrome --version
    - ./gradlew build -x test

# agent-tests:
#   stage: production
#   cache:
#     key:
#      files:
#        - build.gradle
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#   script:
#    - gradle clean test --tests "co.com.webtest.certification.lili.runners.production.agents.AgentRunner" -Denvironment=prod -i
#   rules:
#   - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#     when: never
#   - if: '$CI_PIPELINE_SOURCE == "push"'
#     when: never
#   - when: always
#   artifacts:
#     when: always
#     name: Serenity production enviroment report - agents
#     paths:
#      - target/site/serenity
#     expire_in: 1 week

# intents-tests:
#   stage: production
#   cache:
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#       - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.production.agents.IntentsRunner" -Denvironment=prod -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity production enviroment report - agents
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

# slots-tests:
#   stage: production
#   cache:
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#       - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.production.agents.SlotsRunner" -Denvironment=prod -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity production enviroment report - agents
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

# folders-tests:
#   stage: production
#   cache:
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#       - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.production.folders.*" -Denvironment=prod -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity production enviroment report - folders
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

# global-items-tests:
#   stage: production
#   cache:
#      paths:
#      - build/
#      - cache/
#      - .gradle/
#      - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.production.global_items.*" -Denvironment=prod -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity production enviroment report - global items
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

# reports-tests:
#   stage: production
#   cache:
#     paths:
#      - build/
#      - cache/
#      - .gradle/
#      - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.production.reports.*" -Denvironment=prod -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity production enviroment report - reports
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

#Staging tests

staging-agent-tests:
  stage: staging
  cache:
    paths:
      - build/
      - cache/
      - .gradle/
  script:
    - ./gradlew  clean test --tests "co.com.webtest.certification.lili.runners.staging.agents.AgentRunner" -Denvironment=staging -i
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - when: always
  artifacts:
    when: always
    name: Serenity staging enviroment report - agents
    paths:
      - target/site/serenity
    expire_in: 1 week

# staging-intents-tests:
#   stage: staging
#   cache:
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#       - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.staging.agents.IntentsRunner" -Denvironment=staging -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity staging enviroment report - agents
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

# staging-slots-tests:
#   stage: staging
#   cache:
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#       - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.staging.agents.SlotsRunner" -Denvironment=staging -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity staging enviroment report - agents
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

# staging-folders-tests:
#   stage: staging
#   cache:
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#       - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.staging.folders.*" -Denvironment=staging -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity staging enviroment report - folders
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

# staging-global-items-tests:
#   stage: staging
#   cache:
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#       - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.staging.global_items.*" -Denvironment=staging -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity staging enviroment report - Global items
#     paths:
#       - target/site/serenity
#     expire_in: 1 week

# staging-reports-tests:
#   stage: staging
#   cache:
#     paths:
#       - build/
#       - cache/
#       - .gradle/
#       - builds
#   script:
#     - gradle clean test --tests "co.com.webtest.certification.lili.runners.staging.reports.*" -Denvironment=staging -i
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'
#       when: never
#     - when: always
#   artifacts:
#     when: always
#     name: Serenity staging enviroment report - reports
#     paths:
#       - target/site/serenity